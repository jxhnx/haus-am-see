services:
  kafka:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.kafka
    container_name: kafka
    ports:
      - '9092:9092'
    env_file:
      - .streaming.env
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-net
    healthcheck:
      test:
        [
          'CMD',
          'kafka-topics',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.schemaRegistry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '8081:8081'
    env_file:
      - .streaming.env
    networks:
      - kafka-net
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081/subjects']
      interval: 30s
      timeout: 10s
      retries: 5

  connect:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.connect
    container_name: connect
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - '8083:8083'
    env_file:
      - .streaming.env
    networks:
      - kafka-net
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8083/connectors']
      interval: 30s
      timeout: 10s
      retries: 5

  akhq:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.akhq
    container_name: akhq
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '8080:8080'
    env_file:
      - .streaming.env
    volumes:
      - ./compose/akhq.application.yml:/app/application.yml
    networks:
      - kafka-net

  connect-postgres:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.curl
    container_name: connect-postgres
    depends_on:
      connect:
        condition: service_healthy
    env_file:
      - .streaming.env
      - .source.env
    volumes:
      - ./connectors:/connectors
    entrypoint: /bin/sh
    command: >
      -c '
        envsubst < /connectors/postgres-source.template.json > /connectors/postgres-source.json &&
        curl -X POST -H "Content-Type: application/json" --data "@/connectors/postgres-source.json" http://connect:8083/connectors;
      '
    networks:
      - kafka-net
    profiles:
      - manual

  connect-s3:
    build:
      context: .
      dockerfile: ./compose/Dockerfile.curl
    container_name: connect-s3
    depends_on:
      connect:
        condition: service_healthy
    env_file:
      - .streaming.env
      - .lake.env
    volumes:
      - ./connectors:/connectors
    entrypoint: /bin/sh
    command: >
      -c '
        envsubst < /connectors/s3-sink.template.json > /connectors/s3-sink.json &&
        curl -X POST -H "Content-Type: application/json" --data "@/connectors/s3-sink.json" http://connect:8083/connectors;
      '
    networks:
      - kafka-net
    profiles:
      - manual

volumes:
  kafka-data:

networks:
  kafka-net:
    driver: bridge
